% Create datastore
adsTrain = audioDatastore(fullfile("data/train"), ...
    "IncludeSubfolders", true, ...
    "LabelSource", "foldernames", ...
    "FileExtensions", ".wav");

disp("Reading data...")

% Extract features
[~,adsInfo] = read(adsTrain);
fs = adsInfo.SampleRate;
win = hamming(0.03*fs,"periodic");
overlapLength = round(0.75*numel(win));
extractor = audioFeatureExtractor('Window',win, ...
        'OverlapLength',overlapLength, ...
        'SampleRate',fs, ...
        'SpectralDescriptorInput','melSpectrum', ...
        ...
        'gtcc',true, ...
        'gtccDelta',true, ...
        'gtccDeltaDelta',true, ...
        'spectralSlope',true, ...
        'spectralFlux',true, ...
        'spectralCentroid',true, ...
        'spectralEntropy',true, ...
        'pitch',true, ...
        'harmonicRatio',true);

T = tall(adsTrain);
featureVectorsTall = cellfun( @(x)extractFeatures(x,extractor),T, "UniformOutput",false);
featureVectors = gather(featureVectorsTall)

% LSTM
numClasses = numel(unique(adsTrain.Labels));
layers = [ ...
    sequenceInputLayer(45)
    bilstmLayer(50,"OutputMode","sequence")
    dropoutLayer(0.1)
    bilstmLayer(50,"OutputMode","last")
    fullyConnectedLayer(numClasses)
    softmaxLayer
    classificationLayer];

miniBatchSize = 128;
options = trainingOptions("adam", ...
    "MaxEpochs",4, ...
    "MiniBatchSize",miniBatchSize, ...
    "Plots","training-progress", ...
    "Verbose",false, ...
    "Shuffle","every-epoch", ...
    "LearnRateSchedule","piecewise", ...
    "LearnRateDropFactor",0.1, ...
    "LearnRateDropPeriod",2);

net = trainNetwork(featureVectors,adsTrain.Labels,layers,options);

% === FUNCTIONS ===

% Extract feature vector
function features = extractFeatures(x, aFE)
    x = mean(x, 2); % Collapse stereo?
    features = extract(aFE, x);
    features = transpose(features);
end